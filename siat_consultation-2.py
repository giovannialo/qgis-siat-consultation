# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SiatConsultation
                                 A QGIS plugin
 Query the data of a batch in Siat.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Giovanni Alves de Lima Oliveira
        email                : giovanni.al.oliveira@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import requests
import xmltodict
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from qgis._core import Qgis

from .resources import *
# Import the code for the dialog
from .siat_consultation_dialog import SiatConsultationDialog
import os.path


class SiatConsultation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'SiatConsultation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Siat Consultation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SiatConsultation', message)

    def add_action(self, icon_path, text, callback, enabled_flag = True, add_to_menu = True, add_to_toolbar = True, status_tip = None, whats_this = None, parent = None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/siat_consultation/icon.png'
        self.add_action(icon_path, text = self.tr(u'Siat - Consultation'), callback = self.run, parent = self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Siat Consultation'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        if self.first_start == True:
            self.first_start = False
            self.dlg = SiatConsultationDialog()

        self.property = None
        self.properties = []

        # Get selected feature
        feature = self.getSelectedFeature()

        if feature is None:
            self.iface.messageBar().pushMessage('Alerta', 'Selecione uma feição para solicitar uma consulta no sistema do Siat.')
            return

        if not self.findAllotment(feature):
            return

        self.dlg.show()

        if self.property is not None:
            self.showData()
            return

        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItem('Selecione uma unidade', None)

        for allotment in self.properties:
            self.dlg.comboBox.addItem(allotment.get('inscricaoAnterior'), allotment)

        self.dlg.comboBox.currentTextChanged.connect(self.onComboBoxChanged)

        if not self.dlg.exec_():
            pass  # self.resetLabels()

    def getSelectedFeature(self):
        canvas = self.iface.mapCanvas()
        layer = canvas.currentLayer()

        return layer.selectedFeatures()[0] if len(layer.selectedFeatures()) > 0 else None

    def findAllotment(self, feature):
        url = 'http://192.168.10.7:8080/dsf_mcz_gtm/services/WebServiceGTM'
        xml = f'<?xml version="1.0" encoding="UTF-8"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:WebServiceGTM"><soapenv:Header/><soapenv:Body><urn:consultaImovel><entradaConsultaImovelXML><![CDATA[<Entrada><EntradaConsultaImovel><consumidorServico>WS</consumidorServico><inscricaoCartografica>{feature["geo_key"]}</inscricaoCartografica><inscricaoImobiliaria></inscricaoImobiliaria><possuiSaidaProprietario>S</possuiSaidaProprietario><possuiSaidaCompromissario>N</possuiSaidaCompromissario><possuiSaidaEndCompromissario>N</possuiSaidaEndCompromissario><possuiSaidaEndEntImovel>N</possuiSaidaEndEntImovel><possuiSaidaEndLocImovel>S</possuiSaidaEndLocImovel><possuiSaidaEndProprietario>N</possuiSaidaEndProprietario><possuiSaidaEnquadramento>N</possuiSaidaEnquadramento><possuiSaidaBeneficioFiscal>N</possuiSaidaBeneficioFiscal><possuiSaidaTestadaVinculada>S</possuiSaidaTestadaVinculada><possuiSaidaUnidadeAvalicao>N</possuiSaidaUnidadeAvalicao><possuiSaidaZoneamento>N</possuiSaidaZoneamento><possuiValorVenalImovel>N</possuiValorVenalImovel><possuiSaidaEquipamentoUrbano>N</possuiSaidaEquipamentoUrbano><possuiSaidaFichaCadastral>N</possuiSaidaFichaCadastral><codigoImovel></codigoImovel></EntradaConsultaImovel></Entrada>]]></entradaConsultaImovelXML></urn:consultaImovel></soapenv:Body></soapenv:Envelope>'

        response = requests.post(url, xml, headers = {'Content-Type': 'Application/xml'})

        if response.status_code != 200:
            self.iface.messageBar().pushMessage(f'Erro', 'Algo inesperado aconteceu. Se este erro persistir, entre em contato com o desenvolvedor.', level = Qgis.Critical)
            return False

        text = response.text
        text = text.replace('&lt;', '<')
        text = text.replace('soap:', '')
        text = text.replace('ns2:', '')
        text = text.replace('&gt;', '>')

        data = xmltodict.parse(text)['Envelope']['Body']['consultaImovelResponse']['return']['Saida']['SaidaConsultaImovel']

        if data.get('resposta') != '0':
            self.iface.messageBar().pushMessage('Alerta', data.get('mensagemSaidaConsultaImovel'))
            return False

        if type(data.get('SaidaImovel')) == list:
            self.properties = data.get('SaidaImovel')
        else:
            self.property = data.get('SaidaImovel')

        return True

    def onComboBoxChanged(self):
        if self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex()) is None:
            return

        self.property = self.dlg.comboBox.itemData(self.dlg.comboBox.currentIndex())
        self.show()

    def show(self):
        self.owner = self.property.get('saidaProprietariosImovel').get('SaidaProprietarioImovel')
        self.owner_address = self.owner.get('saidaEnderecoProprietario')
        self.address_location_property = self.property.get('saidaEnderecoLocalizacaoImovel')
        self.address_delivery_property = self.property.get('saidaEnderecoEntregaImovel')
        self.allotment = self.property.get('saidaLote')
        self.tested_linked = self.allotment.get('saidaTestadasVinculadas').get('SaidaTestadaVinculada')
        self.urban_equipment = self.tested_linked.get('saidaEquipamentoUrbano')
        self.evaluation_unit = self.property.get('saidaUnidadesAvaliacao').get('SaidaUnidadeAvaliacao')

    def showReferenciaCadastral(self):
        self.dlg.labelInscricaoImobiliaria.setText(self.property.get('inscricaoImobiliaria'))
        self.dlg.labelInscricaoCartografica.setText(self.property.get('inscricaoCartografica'))
        self.dlg.labelInscricaoAnterior.setText(self.property.get('inscricaoAnterior'))

        self.dlg.labelSituacao.setText('ATIVO' if self.property.get('situacao') == 'A' else 'INATIVO')

        taxation = {'1': 'CONDOMÍNIO', '2': 'TRIBUTÁVEL', '3': 'TRIBUTÁVEL ISENTO', '4': 'DESTINAÇÃO', '5': 'TRIBUT. RURAL', '6': 'ISENTO IPTU', '7': 'ISENTO IPTU + TSU', '8': 'ISENTO TSU', '9': 'IMUNE', '10': 'REMEMBRADO', '11': 'CAUCIONADO', '12': 'ISENTO IPTU + TSU', '13': 'INSTITUIÇÃO CULTURAL', '14': 'ISENTO C/ DEST.', '15': 'IMÓVEIS CEDIDOS', '16': 'APOSENTADO', '17': 'EX-COMBATENTES', '18': 'DEFICIENTE FÍSICO', '19': 'ISENTO TSU', '20': 'NORMAL', '21': 'ENTIDADES', '22': 'REMEMBRAMENTO', '23': 'TRIB. RURAL', '24': 'ZEP-2', '25': 'PATRIMÔNIO MUNICIPAL', '26': 'CAUCIONADO', '27': 'COLETA/TRANSPORTE', '28': 'DESTINAÇÃO', '29': 'LIMITAÇÃO ÁREA', '30': 'ERRO/DUPLICIDADE', '31': 'INSTITUIÇÃO CULTURAL', '32': 'PATRIMÔNIO ESTADUAL', '33': 'PATRIMÔNIO FEDERAL', '34': 'ISENTO C/ DEST.', '35': 'ENT S/ FINS LUC.', '36': 'PAR', '37': 'FRAÇÃO IDEAL', '38': 'IPTU DECISÃO JUDICIAL', '39': 'TSU DECISÃO JUDICIAL', '40': 'INCENTIVO JARAGUÁ'}
        self.dlg.labelTaxacao.setText(taxation.get(self.property.get('taxacao')))

    def showCompromissario(self):
        propertyOwner = self.property.get('saidaProprietariosImovel').get('SaidaProprietarioImovel')
        self.dlg.labelProprietarioImovelCpfCnpj.setText('{}{}{}.{}{}{}.{}{}{}-{}{}'.format(*propertyOwner.get('cpfCnpj')) if len(propertyOwner.get('cpfCnpj')) == 11 else '{}{}.{}{}{}.{}{}{}/{}{}{}{}-{}{}'.format(*propertyOwner.get('cpfCnpj')))
        self.dlg.labelProprietarioImovelNomeRazaoSocial.setText(propertyOwner.get('nomeRazaoSocial'))

    def showLocalizacaoImovel(self):
        addressLocationProperty = self.property.get('saidaEnderecoLocalizacaoImovel')
        self.dlg.labelEnderecoLocalizacaoImovelLogradouro.setText(addressLocationProperty.get('logradouro'))
        self.dlg.labelEnderecoLocalizacaoImovelNumero.setText(addressLocationProperty.get('numero') if len(addressLocationProperty.get('numero')) != 0 else '---')
        self.dlg.labelEnderecoLocalizacaoImovelCep.setText('{}{}.{}{}{}-{}{}{}'.format(*addressLocationProperty.get('cep')))
        self.dlg.labelSaidaLoteQuantidadeFrente.setText(self.property.get('saidaLote').get('quantidadeFrente'))

        if addressLocationProperty.get('complemento') is not None:
            complement = ''

            try:
                block_i = addressLocationProperty.get('complemento').index('QUADRA:') + 8
                block_e = addressLocationProperty.get('complemento').index(';', block_i)
                block = addressLocationProperty.get('complemento')[block_i:block_e]
                complement += 'BL ' + block if len(block) > 0 and block != 'null' else ''
            except ValueError:
                pass

            try:
                lot_i = addressLocationProperty.get('complemento').index('LOTE:') + 6
                lot_e = addressLocationProperty.get('complemento').index(';', lot_i)
                lot = addressLocationProperty.get('complemento')[lot_i:lot_e]

                if len(complement) > 0:
                    complement += '-'

                complement += 'LT ' + lot if len(lot) > 0 and lot != 'null' else ''
            except ValueError:
                pass

            try:
                apartment_i = addressLocationProperty.get('complemento').index('APARTAMENTO:') + 13
                apartment_e = addressLocationProperty.get('complemento').index(';', apartment_i)
                apartment = addressLocationProperty.get('complemento')[apartment_i:apartment_e]

                if len(complement) > 0:
                    complement += '-'

                complement += 'APT ' + apartment if len(apartment) > 0 and apartment != 'null' else ''
            except ValueError:
                pass

            self.dlg.labelEnderecoLocalizacaoImovelComplemento.setText(complement.upper())

            try:
                allotment_i = addressLocationProperty.get('complemento').index('LOTEAMENTO:') + 12
                allotment_e = addressLocationProperty.get('complemento').index(';', allotment_i)
                allotment = addressLocationProperty.get('complemento')[allotment_i:allotment_e]

                self.dlg.labelEnderecoLocalizacaoImovelLoteamento.setText(allotment.upper())
            except ValueError:
                pass

            try:
                condominium_i = addressLocationProperty.get('complemento').index('CONDOMINIO:') + 12
                condominium_e = addressLocationProperty.get('complemento').index(';', condominium_i)
                condominium = addressLocationProperty.get('complemento')[condominium_i:condominium_e]

                self.dlg.labelEnderecoLocalizacaoImovelCondominio.setText(condominium.upper())
            except ValueError:
                pass

        self.dlg.labelEnderecoLocalizacaoImovelBairro.setText(addressLocationProperty.get('bairro'))
        self.dlg.labelEnderecoLocalizacaoImovelCidade.setText(addressLocationProperty.get('cidade') + '/' + addressLocationProperty.get('uf'))

        self.dlg.labelEnderecoLocalizacaoImovelQuadra.setText(self.property.get('saidaLote').get('numeroQuadraLoteamento'))
        self.dlg.labelEnderecoLocalizacaoImovelLote.setText(self.property.get('saidaLote').get('numeroLoteLoteamento'))

        self.dlg.labelEnderecoLocalizacaoImovelInscricaoFace.setText(self.property.get('saidaLote').get('saidaTestadasVinculadas').get('SaidaTestadaVinculada').get('inscricaoFace'))

        self.dlg.label
